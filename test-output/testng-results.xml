<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="21" passed="20">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="126" started-at="2020-02-23T23:06:42Z" finished-at="2020-02-23T23:06:42Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="126" started-at="2020-02-23T23:06:42Z" finished-at="2020-02-23T23:06:42Z">
      <class name="net.groot.data.InvocationNewsTest">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeSuite" is-config="true" duration-ms="11" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeTest" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeClass" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="SearchBarMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="SearchBarMethod" duration-ms="7" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchBarMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="math()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="math" duration-ms="5" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- math -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="math()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="math" duration-ms="3" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- math -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="math()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="math" duration-ms="3" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- math -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="2" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="1" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="1" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="1" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="1" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="invokeProvider(java.lang.Integer, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="invokeProvider" duration-ms="0" started-at="2020-02-23T18:06:42Z" data-provider="dProvider1" finished-at="2020-02-23T18:06:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invokeProvider -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="2" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="mathError()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="mathError" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: "100A"]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: "100A"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at net.groot.data.InvocationNewsTest.mathError(InvocationNewsTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mathError -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterMethod" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="FAIL" signature="webParameterTest(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="webParameterTest" duration-ms="0" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Parameter 'env' is required by @Test on method webParameterTest but has not been marked @Optional or defined
in C:\Users\thoma\AppData\Local\Temp\testng-eclipse--1827764408\testng-customsuite.xml]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Parameter 'env' is required by @Test on method webParameterTest but has not been marked @Optional or defined
in C:\Users\thoma\AppData\Local\Temp\testng-eclipse--1827764408\testng-customsuite.xml
	at org.testng.internal.Parameters.createParameters(Parameters.java:155)
	at org.testng.internal.Parameters.createParameters(Parameters.java:355)
	at org.testng.internal.Parameters.handleParameters(Parameters.java:447)
	at org.testng.internal.Invoker.handleParameters(Invoker.java:1383)
	at org.testng.internal.Invoker.createParameters(Invoker.java:1075)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1180)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webParameterTest -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterClass" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterTest" is-config="true" duration-ms="1" started-at="2020-02-23T18:06:42Z" finished-at="2020-02-23T18:06:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="FAIL" signature="afterSuite()[pri:0, instance:net.groot.data.InvocationNewsTest@627551fb]" name="afterSuite" is-config="true" duration-ms="0" started-at="2020-02-23T18:06:43Z" finished-at="2020-02-23T18:06:43Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at net.groot.data.InvocationNewsTest.afterSuite(InvocationNewsTest.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:308)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- net.groot.data.InvocationNewsTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
